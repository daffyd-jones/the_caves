//settlement rs
use crate::dialogue::{load_comms, load_convos, CommDialogue, ConvoDialogue};
use crate::enums::Shops;
use crate::enums::{Cells, Door, EnvInter, NPCWrap, Settle};
use crate::item::Item;
use crate::npc::{new_comm_npc, new_conv_npc, new_shop_npc, Convo, ShopConvos, ShopData};
use crate::npc_utils::box_npc;
use crate::shop::Shop;
use rand::prelude::SliceRandom;
use rand::Rng;

//use serde::{Deserialize, Serialize};
//use serde_json::Result;
//use serde_json::Value;
use std::fs;

use std::collections::HashMap;

// med: 300x200 sm: 150x100 | sm: 2(75)x2(25) med: 3(75)x3(25)

const itm_sh1: &str = r#"CommNPC CommNPC CommNPC ShopNPC|HealthPotion HealthPotion HealthPotion Salve Salve Dowel WoodenBoard Apple Apple Apple HealthPotion HealthPotion HealthPotion HealthPotion HealthPotion Salve Salve Dowel WoodenBoard Apple Apple Apple HealthPotion HealthPotion HealthPotion Salve Salve Dowel WoodenBoard Apple Apple Apple|HealthPotion
___________________________________________________________________________
___________________________________________________________________________
,·,.'__,.'·,.'·,.'__'·,.'·,,.'·,.'·,.'__,.'·,.'·,.'________________________
__,··,·,.'·,.'·,.',,.'·,.'·,.'·,.'·,.',.,.'·,.'·,.'',.'·,.'·,.'·___________
__,··',.'·,.'·,.'·,,.'·,.'·,.'.'·,.'·,.'·,.'·,.'·,.',.'·,.'·,¨¸.'__________
·,.'·▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒,.·¨¸_________
,·,.'▒   O≡    ≡≡≡  ║         │     ─┬─   ─┬─   ─┬─   ─┬─   ▒,.··__________
·,,··▒≡ ≡≡≡ ≡≡    ≡≡║               o│o   o│o   o│o   o│o   ▒,.'___________
__,··▒≡     ≡≡≡≡≡ ≡ ║               o│o   o│o   o│o   o│o   ▒·_____________
·,.'·▒ ≡≡≡≡≡≡     ≡ ║         │     o│o   o│o   o│o   o│o   ▒,.'___________
,·,.'▒    ≡≡≡ ≡≡≡≡ ≡║         │     ─┴─   ─┴─   ─┴─   ─┴─   ▒¨¸·___________
__,··▒  ≡     ≡≡≡   ║         │     @                       ▒,.·'__________
_·,··▒  ≡≡≡≡≡≡≡               │                             ▒·_,.'_________
·,.'·▒                        │                             _,·.'__________
,·,.'▒              ║         │                             _·,.'__________
_·,··▒              ║         │                             _,·.'__________
__,··▒══════  ══════╣         │                             ▒·,.'__________
·,.'·▒              ║ @       │                ┌─   ─┬─   ─┐▒,.'___________
,·,.'▒              ║         └───────────────┐│o   o│o   o│▒·,·,·_________
__,··▒@             ║                    @    ││o   o│o   o│▒,.'·__________
_·,··▒              ║                         │└─────┴─────┘▒,·,.'_________
·,.'·▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒,··,.'________
,·,·,·,·,·,·,·,·,·,·,·,·,·,··,.'·,.'·,.'·,.'·,.'·,.',·,·,··,..'.''_________
··,.',.'·,.'·,.'·,.'·,.'·,.'·,.'·,.'·,.'·,.'·,.'·,.'·,.'·,.'···____________
___________________________________________________________________________
"#;

const itm_sh2: &str = r#"ShopNPC ConvNPC|BronzeClaymore BronzeLongsword HealthPotion WoodStaff Salve Dowel SmallWoodShield Apple BronzeHeavyAxe Apple BronzeWarAxe HealthPotion HealthPotion HealthPotion HealthPotion Salve Salve Dowel HealthPotion HealthPotion HealthPotion Salve Salve Dowel|HealthPotion
___________________________________________________________________________
___________________________________________________________________________
__',¨.',·¨.'¨.',·¨.'¨.',·¨.',¨.',·¨.',¨.',·¨.______________________________
_.',▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒¨.',·¨.'¨.',·¨.'¨.',·¨.'_________________________
__',▒    ─┬─  ─┬─  ─┬─   ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒.',·¨________________________
_.',_    o│o  o│o  o│o   ▒     ≡≡≡≡   ≡      ▒¨.',·________________________
_·',_    o│o  o│o  o│o   ▒ ≡≡≡ ≡    ≡ ≡ ≡≡≡≡ ▒.',·¨________________________
_¨',▒    o│o  o│o  o│o   ▒   ≡ ≡ ≡≡≡≡   ≡≡≡  ▒¨.',·________________________
_.',▒    o│o  o│o  o│o   ▒≡≡ ≡   ≡≡≡≡≡≡≡≡≡≡ ≡▒¨.',__┌┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┐_____
',',▒    ─┴─  ─┴─  ─┴─   ▒   ≡≡≡≡≡≡≡      ≡  ▒.',___├_*__________¸_¸_┤_____
,.',▒                    ▒ ≡≡≡≡    ≡ ≡≡≡≡ ≡≡ ▒¨.',__├_**_________·¸·¸┤_____
_·',▒                    ▒      ≡≡   ≡    ≡O ▒.',·¨_├____________¨·¨·┤_____
_¨',▒                    ▒▒▒▒▒▒▒▒▒▒▒▒▒ ▒▒▒▒▒▒▒¨.',·_├_____________·¸¨┤_____
_.',▒   ┌────────────────▒.',·¨.',·¨.',·¨.',·¨.',·¨_├_____________¨·¸┤_____
_·',▒   │              @ ▒¨.'_.',·¨.',·¨.',·¨.',·¨.'├_____________¸¨·┤_____
_·',▒                    ▒¨.'¨.┌┬┬┬┬┬_┬┬┬┬┬┬┬┬┬┬┬┬┬┬┤_____________·¸¨┤_____
_¨',▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒¨.·__├__________________________________¨·¸┤_____
.',.',·¨.',·¨.',·¨.',·¨.',··¨¨_├__________________________________¸¨¸┤_____
.',·¨.',·¨.',·¨.',·¨.',·¨.'¨___├_____________________________@____·_·┤_____
_______________________________├__________________________________¨_¨┤_____
_______________________________├┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┤_____
___________________________________________________________________________
___________________________________________________________________________
___________________________________________________________________________
___________________________________________________________________________
"#;

const church1: &str = r#"ConvNPC ShopNPC|Null|HealthPotion
___________________________________________________________________________
_________________..',¨.',·¨.',¨.',·¨.',¨.',·¨.,·¨._________________________
_______________¨¨.',·¨.'¨.',·¨.'¨.'.',·¨.'¨.¨.'¨.'_________________________
_______________.',·▒▒▒Ø▒▒Ø▒▒Ø▒▒Ø▒▒Ø▒▒Ø▒▒Ø▒▒Ø▒▒▒.',·¨_______________________
_______________¨.',▒▒ ░  ░  ░  ░  ░  ░  ░  ░ ▒▒¨.',·_______________________
_________·¨,·¨.',··▒▒                        ▒▒.',·,·¨¨____________________
______.',.',·¨.'.',▒▒ ╔════════════════════╗ ▒▒¨.',',···¨.'________________
______··¨.'▒▒▒▒▒▒Ø▒▒▒ ║░░░░░░░░░░░░░░░░░░░░║ ▒▒▒Ø▒▒▒▒▒.',·¨________________
______.',·¨▒▒         ║░░░░░░░░░░░░░░░░░░░░║        ▒▒¨.',·________________
______¨.',·▒▒         ╚════════════════════╝        ▒▒.',·¨________________
______.',·¨▒▒                                       ▒▒¨.',·________________
______¨.',·▒▒      @                    ┌───────────▒▒¨.',_________________
______¨.',_▒▒                                  @    ▒▒.',__________________
______.',__▒▒                        ╔══════════════▒▒¨.',_________________
______¨.',_▒▒                             ≡   ≡   ≡≡▒▒.',·¨________________
___________                          ║    ≡ ≡ ≡ ≡ ≡O▒▒¨.',·________________
___________                          ║      ≡   ≡   ▒▒.',·¨________________
______.',·¨▒▒            ┌sssssssss┐ ║ ┌──────────┐ ▒▒',·¨.________________
_______·¨,'▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒.',·¨________________
_______',·¨,',·¨.',·¨,·¨.',·¨,·¨.',·¨¨,',·¨.',·¨,·¨.',¨.',·________________
_________¨¨.',·¨.',.',·¨.',.',·¨.',.',·¨¨.',',.',·¨.',_____________________
___________________________________________________________________________
___________________________________________________________________________
___________________________________________________________________________
___________________________________________________________________________
"#;

const church2: &str = r#"ConvNPC CommNPC ConvNPC ShopNPC|Null|Apple Apple Apple
___________________________________________________________________________
___________________________________________________________________________
__________________________________________________________┌┬_┬┬┬┬┬┬,__┬┬┐__
________"▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒__________________________├ʬʬʬʬʬʬʬʬʬʬʬʬʬ┤__
________,▒    │ ± °×¤×° ± │ @  ▒_____,___________________'├Oʬʬʬʬʬʬʬʬʬʬʬʬ┤__
_________▒ :·:└───────────┘:·: ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒______├ʬʬʬʬʬʬʬʬʬʬʬʬʬ┤__
_________▒ :·:·:·:·:·:·:·:·:·: ║                   ▒──┐___├ʬʬʬʬʬʬʬʬʬʬʬʬʬ┤__
_________▒ :·:·:·:·:·:·:·:·:·: ║   @               ▒⚵'│___├ʬʬʬʬʬʬʬʬʬʬʬʬʬ┤__
_________▒ └─────┘·:·:·└─────┘                     ▒'"│___├ʬʬʬʬʬʬʬʬʬʬʬʬʬ┤__
_________▒ └─────┘·:·:·└─────┘ ║              @    ▒''│___├ʬʬʬʬʬʬʬʬʬʬʬʬʬ___
_________▒ └─────┘·:·:·└─────┘ ║                   ▒,'│___├ʬʬʬʬʬʬʬʬʬʬʬʬʬ___
_________▒ └─────┘·:·:·└─────┘ ║   π⑁              ▒──┘___├ʬʬʬʬʬʬʬʬʬʬʬʬʬ___
_________▒ └─────┘·:·:·└─────┘ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒______├ʬʬʬʬʬʬʬʬʬʬʬʬʬ┤__
_________▒ └─────┘·:·:·└─────┘ ▒_______________'___________ʬʬʬ"______┬┬┬┤__
_________▒ └─────┘·:·:·└─────┘ ▒___________________________________________
_________▒ └─────┘·:·:·└─────┘ ▒______┌┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┐______
________,▒ └─────┘·:·:·└─────┘  ______├____"____________'__________"┤______
_________▒──   ─┐               ____________________________________┤______
_________▒      │              ▒______├,____________________________┤______
_________▒   @  │              ▒______├___________________________O*┤______
_________▒      │              ▒______├⚵⚵__________,'____________O**┤______
_________▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒______├┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┤______
___________________________"_______________________________________________
___________________________________________________________________________
___________________________________________________________________________
"#;

const pal: &str = "empty: ' . , ' * | wall: ▒ | other ▓ ░ ~ | pipes: ═ ║ ╣ ╠ ╩ ╦ ╗ ╝ ╚ ╔ ╬   ┐ └ ┴ ┬ ├ ─ ┼ ┘ ┌ ┤ │ ≡ ° × ¤ ¸ ¨ · ■ ¦ ± ¡ ø Ø ©";

const guild1: &str = r#"ConvNPC CommNPC ConvNPC ShopNPC|Null|HealthPotion
____________________,________________________________________'____________
___________________________________._______________________________________
______▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒___┌┬┬┬┬┬┬┬┬┬┬┬┬┐___
______▒ └ppppppp┘            ║                  @     ▒___├_O__________┤___
____._▒                                               ▒___├____________┤___
______▒                      ║┌ccccccccccc┐           ▒___├____________┤___
______▒                      ║│   @       │           ▒___├____________┤___
______▒            @         ║│           │           ▒___├____________┤___
______▒┐         ┌───  ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒___├____________┤___
_,____▒l         │@    ▒__________________________________├____________┤___
______▒l         │     ▒__________________________________├____________┤___
______▒┘         │     ▒___┌┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┼____________┤___
______▒▒▒▒▒▒▒▒  ▒▒▒▒▒▒▒▒___├___________________________________________┤___
___________________________├___________________________________________┤___
___________________________├___________________________________________┤___
___________________________├┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬__┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┤___
_______,___________________________________________________________________
___________________'__________________________________~~~~~~~~~~~~~_____'__
__________.______________________.___________________~~~~~~~~~~~~~~~~______
______________________________________________________~~~~~~~~~~~~~~~~~____
___________________________,_________________________~~~~~~~~~~~~~~~~~~~___
___________________,_____________________'__________~~~~~~~~~~~~~~~~~~~____
___._________________________________________________~~~~~~~~~~~~~~~~~~____
______________________________________________________~~~~~~~~~~~~~~~______
___________________________________________________________________________
"#;

const anchor1: &str = r#"CommNPC|Null|Null
___________________________________________________________________________
________________________________'__________________________________________
_____________________________________________________________,_____________
___________________________________________________________________________
________@_______________________________________.__________________________
________________┌_____┐____________________________________________________
________________│{(¤)}│____________________________________________________
________________├┴─┬─┴┤_____._______________________________________.______
___________________________________________________________________________
_______,··',.'·,.'·,.'·,,.'·,.'·,.'.'·,.'·,.'·,.'·,.'·,.',.________________
_____,··',.'·,.'·,.'·,,.'·,.'·,.'.'·,.'·,.'·,.'·,.'·,.',.__________________
___,··',.'·,.'·,.'·,,.'·,.'·,.'.'·,.'·,.'·,.'·,.'·,.',.____________________
__,··',.'·,.'·,.'·,,.'·,.'·,.'.'·,.'·,.'·,.'·,.'·,.________________________
_,··',.'·,.'·,.'·,,.'·,.'·,.'.'·,.'·,.'·,.'·,.'·,_____~~~~~~~~~~~~~________
___,··',.'·,.'·,.'·,,.'·,.'·,.'.'·,.'·,.'·,.'·,._____~~~~~~~~~~~~~~~~______
____,··',.'·,.'·,.'·,,.'·,.'·,.'.'·,.'·,.'·,.'._______~~~~~~~~~~~~~~~~~____
___,··',.'·,.'·,.'·,,.'·,.'·,.'.'·,.'·,.'·,.'·,______~~~~~~~~~~~~~~~~~~~___
_________,··',.'·,.'·,.'·,,.'·,.'·,.'.',.___________~~~~~~~~~~~~~~~~~~~____
________________,··',.'·,.'·,.'·,,.'.________________~~~~~~~~~~~~~~~~~~____
_______________________,··',.'·.______________________~~~~~~~~~~~~~~~______
___,_____________________________________________'_________________________
___________________________________________________________________________
_____________._____________________________________________________________
___________________________________________________________________________
___________________________________________________________________________
"#;

const item_shops: [&str; 2] = [itm_sh1, itm_sh2];

const guild_shops: [&str; 1] = [guild1];

const churches: [&str; 1] = [church1];

const anchors: [&str; 1] = [anchor1];

const palette: &str = "empty: ' . , ' * | wall: ▒ | other ▓ ░ ~ | pipes: ═ ║ ╣ ╠ ╩ ╦ ╗ ╝ ╚ ╔ ╬   ┐ └ ┴ ┬ ├ ─ ┼ ┘ ┌ ┤ │ ≡ ° × ¤ ¸ ¨ · ■ ¦ ± ¡ ø Ø ©";

const cave_o: &str = r#"CommNPC CommNPC CommNPC CommNPC CommNPC CommNPC CommNPC CommNPC CommNPC|HealthPotion HealthPotion HealthPotion Salve Salve Dowel WoodenBoard Apple Apple Apple|Apple
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒_______________________________▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒________________▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒________________▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒____
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒_______________________________▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒________________▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒________________▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒____
▒▒▒▒_____________________________▒▒▒▒___________________________▒▒▒▒_________________________________▒▒▒▒_____________________________________▒▒▒▒____
▒▒▒▒_____________________________▒▒▒▒___________________________▒▒▒▒_________________________________▒▒▒▒_____________________________________▒▒▒▒____
▒▒▒▒_____________________________▒▒▒▒___________________________▒▒▒▒_________________________________▒▒▒▒_____________________________________▒▒▒▒____
▒▒▒▒_____________________________▒▒▒▒___________________________▒▒▒▒_________________________________▒▒▒▒_____~~~~~~~~~_______________________▒▒▒▒____
▒▒▒▒______________________________________________________________________________________________________~~~~~~~~~~~~~~~~____________________▒▒▒▒____
▒▒▒▒_______________________________________________________________________________________________~~~~~~~~~~~~~~~~~~~~~~~~~~~________________▒▒▒▒____
▒▒▒▒___________________________________________________________________________________________~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~_____________▒▒▒▒____
▒▒▒▒__________________________▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒_________________________~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~_____________▒▒▒▒____
______________________________▒                                      ▒_________________________~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~_____________________
______________________________▒                                      ▒_________________________~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~_____________________
▒▒▒▒__________________________▒                                      ▒_________________________~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~_____________________
▒▒▒▒__________________________▒                                      ▒_________________________~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~_____________________
▒▒▒▒__________________________▒═══════════════════════════════   ════▒___________________________~~~~~~~~~~~~~~~~~~~~~~~~~~~~_________________▒▒▒▒____
▒▒▒▒__________________________▒  o│o  o│o  o│o              @        ▒________________________________~~~~~~~~~~~~~~~_________________________▒▒▒▒____
______________________________▒  ─┼─  ─┼─  ─┴─      └────────────────▒____________________________________~~~~~_______________________________▒▒▒▒____
______________________________▒  o│o  o│o                            ▒________________________________________________________________________▒▒▒▒____
______________________________▒                                      ▒_____________├┤_________________________________________________▒▒▒▒▒▒▒▒▒▒▒▒____
______________________________▒                                      ▒_O__________,├┤,________________________________________________▒▒▒▒▒▒▒▒▒▒▒▒____
______________________________▒▒▒▒▒▒▒▒▒▒▒▒▒____▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒____________,..,________________________________________________________▒▒▒▒____
________________________________________________________________________________________________▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒_____________▒▒▒▒____
________________________________________________________________________________@_______________▒    │°  ╚══════════════╝ °│    ▒_____________▒▒▒▒____
________________________________________________________________________________________________▒    │°   ≡ø≡  ±©±  ≡ø≡   °│    ▒_____________▒▒▒▒____
________________________________________________________________________________________________▒    └─────────────────────┘    ▒_____________▒▒▒▒____
________________________________________________________________________________________________▒    ░░░░░░░░░░░░░░░░░░░░░░░@   ▒_____________▒▒▒▒____
_________________________▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒_____________________________________▒    ░░░░░░░░░░░░░░░░░░░░░░░    ▒_____________▒▒▒▒____
_________________________▒┌──────┐  ║      │   └──────┘   ▒________________┌_____┐______________▒    └───────┘░░░░░└───────┘    ▒_____________▒▒▒▒____
_________________________▒└──────┘  ║      ┘              ▒______________@_│{(¤)}│______________▒    └───────┘░░░░░└───────┘    ▒_____________________
_________________________▒┌──────┐  ║                @    ▒________________├┴─┬─┴┤______________▒    └───────┘░░░░░└───────┘    ▒_____________________
_________________________▒└──────┘  ║      ┐              ▒_____________________________________▒    └───────┘░░░░░└───────┘    ▒_____________________
_________________________▒┌──────┐  ║      │              ______________________________________▒    └───────┘░░░░░└───────┘    ▒_____________▒▒▒▒____
▒▒▒▒_____________________▒└──────┘  ║      │              ______________________________________▒    └───────┘░░░░░└───────┘    ▒_____________▒▒▒▒____
▒▒▒▒_____________________▒          ║      │              ▒_____________________________________▒    └───────┘░░░░░└───────┘    ▒_____________▒▒▒▒____
▒▒▒▒▒▒▒▒▒▒▒▒_____________▒════  ════╝      │              ▒______________________________________    └───────┘░░░░░└───────┘    ▒_____________▒▒▒▒____
▒▒▒▒▒▒▒▒▒▒▒▒_____________▒┐                │              ▒______________________________________                               ▒_____________________
▒▒▒▒_____________________▒│@              @│@             ▒_____________________________________▒                   ┌───────────▒_____________________
▒▒▒▒_____________________▒┘                │              ▒_____________________________________▒                           @   ▒_____________________
▒▒▒▒_____________________▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒_____________________________________▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒_____________▒▒▒▒____
▒▒▒▒__________________________________________________________________________________________________________________________________________▒▒▒▒____
______________________________________________________________________________________________________________________________________________▒▒▒▒____
______________________________________________________________________________________________________________________________________________▒▒▒▒____
______________________________________________________________________________________________________________________________________________▒▒▒▒____
▒▒▒▒_______________▒▒▒▒___________________________________________________▒▒▒▒_________________________________▒▒▒▒___________________________▒▒▒▒____
▒▒▒▒_______________▒▒▒▒___________________________________________________▒▒▒▒_________________________________▒▒▒▒___________________________________
▒▒▒▒_______________▒▒▒▒___________________________________________________▒▒▒▒_________________________________▒▒▒▒___________________________▒▒▒▒____
▒▒▒▒_______________▒▒▒▒___________________________________________________▒▒▒▒_________________________________▒▒▒▒___________________________▒▒▒▒____
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒_____________________________________▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒_________________________▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒____
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒_____________________________________▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒_________________________▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒____
______________________________________________________________________________________________________________________________________________________
"#;

const cave_o1: &str = r#"ShopNPC|HealthPotion BronzeLongsword ShieldingPendant Salve LightArmour Dowel SmallWoodShield BronzePickHammer BronzeShortsword Apple|Apple
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒_________########______________▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒_________########______________▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒_____________________________▒▒▒▒___________________________▒▒▒▒_______
▒▒▒▒_____________________________▒▒▒▒___________________________▒▒▒▒_______
▒▒▒▒_____________________________▒▒▒▒___________________________▒▒▒▒_______
▒▒▒▒_____________________________▒▒▒▒___________________________▒▒▒▒_______
▒▒▒▒_______________________________________________________________________
▒▒▒▒_______________________________________________________________________
▒▒▒▒_______________:____________________,",',______________________________
▒▒▒▒__________________________▒▒▒▒▒▒__▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒_____
__________________________┌───▒≡ ℧       π⑁ │  ║  D    ≡≡    ≡≡≡   ≡≡▒_____
__________________________│_,'▒ṑ            │  ║  │≡≡≡     ≡     ≡  ≡▒_____
▒▒▒▒______________________│',"▒ṑ    ┌───────┘  ║≡ ├───────┤≡≡≡≡≡≡≡≡ ≡▒_____
▒▒▒▒______________________│','▒       h        ║       ≡≡≡│         ≡▒_____
▒▒▒▒______________________│','▒════════════════╩══════════════   ════▒_____
▒▒▒▒______________________│','▒  o│o  o│o  o│o                       ▒_____
####______________________│','▒  ─┼─  ─┼─  ─┴─      └─────────┐      ▒_____
####_________,____________│','▒  o│o  o│o                     │      ▒_____
####______________________│__'▒                               │@     ▒_____
####______________________└───▒                               │      ▒_O___
______________________________▒▒▒▒▒▒▒▒▒▒▒▒▒____▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒_____
_______________________________"__________"________________________________
___________________________________________________________________________
_____________________________________________________._____________________
___________________________________________________________________________
"#;

const cave_o2: &str = r#"CommNPC|Null|Null
________________▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒______##########▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒____
________________▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒______##########▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒____
__________________________▒▒▒▒_____________________________________▒▒▒▒____
__________________________▒▒▒▒_____________________________",______▒▒▒▒____
__________________________▒▒▒▒_____________________________________▒▒▒▒____
__________________________▒▒▒▒_____~~~~~~~~~_______________________▒▒▒▒____
_______________________________~~~~~~~~~~~~~~~~____________________▒▒▒▒____
________________________~~~~~~~~~~~~~~~~~~~~~~~~~~~________________▒▒▒▒____
____________________~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~_____________▒▒▒▒____
____________________~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~_____________▒▒▒▒____
____________________~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~_____________________
____________________~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~_____________________
____________________~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~_________________####
____________________~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~_________________####
______________________~~~~~~~~~~~~~~~~~~~~~~~~~~~~_________________▒▒▒▒####
___________________________~~~~~~~~~~~~~~~_________________________▒▒▒▒####
_______________________________~~~~~_______________________________▒▒▒▒####
___________________________________________________________________▒▒▒▒____
________├┤_________________________________________________▒▒▒▒▒▒▒▒▒▒▒▒____
_______,├┤,________________________________________________▒▒▒▒▒▒▒▒▒▒▒▒____
_______,..,________________________________________________________▒▒▒▒____
_____________________▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒"____________▒▒▒▒____
_____@_______________▒    │°  ╚══════════════╝ °│    ▒_____________▒▒▒▒____
_____________________▒    │°   ≡ø≡  ±©±  ≡ø≡   °│    ▒_____________▒▒▒▒____
_____________________▒    └─────────────────────┘    ▒_____________▒▒▒▒____
"#;

const cave_o3: &str = r#"CommNPC CommNPC CommNPC CommNPC ShopNPC CommNPC|Null|Null
___________________________________________________________________________
_________________________▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒________________
_________________________▒┌──┐ ┌──┐ ║      │   └pppppp┘   ▒________________
####_____________________▒└──┘ └──┘ ║      ┘              ▒______________@_
####_____________________▒┌──┐      ║                @    ▒________________
####_____________________▒└──┘      ║      ┐              ▒________________
####_____________________▒    @     ║      │              _________________
▒▒▒▒_____________________▒└cccccccc┘║      │              _________________
▒▒▒▒_____________________▒          ║      │              ▒________________
▒▒▒▒▒▒▒▒▒▒▒▒_____________▒════  ════╝      │              ▒________________
▒▒▒▒▒▒▒▒▒▒▒▒_____________▒┐                │              ▒________________
▒▒▒▒____________________,▒l@              @│@             ▒________________
▒▒▒▒____________________'▒┘                │              ▒________________
▒▒▒▒_____________________▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒________________
▒▒▒▒_______________________________________________________________________
___________________________________________________________________________
___________________________________________________________________________
___________________________________________________________________________
▒▒▒▒_______________▒▒▒▒___________________________________________________▒
▒▒▒▒_______________▒▒▒▒___________________________________________________▒
▒▒▒▒_______________▒▒▒▒___________________________________________________▒
▒▒▒▒_______________▒▒▒▒___________________________________________________▒
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒###########__________________________▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒###########__________________________▒▒▒▒▒▒▒▒▒▒▒
___________________________###########_____________________________________
"#;

const cave_o4: &str = r#"CommNPC ShopNPC|Null|Null
_____________________▒    :·:·:·:·:·:·:·:·:·:·:·:@   ▒_____________▒▒▒▒____
_____________________▒    :·:·:·:·:·:·:·:·:·:·:·:    ▒_____________▒▒▒▒____
┌_____┐______________▒    └───────┘·:·:·└───────┘    ▒_____________▒▒▒▒____
│{(¤)}│______________▒    └───────┘·:·:·└───────┘    ▒_____________________
├┴─┬─┴┤_____________"▒    └───────┘·:·:·└───────┘    ▒_____________________
_____________________▒    └───────┘·:·:·└───────┘    ▒_________________####
_____________________▒    └───────┘·:·:·└───────┘    ▒_____________▒▒▒▒####
_____________________▒    └───────┘·:·:·└───────┘    ▒,____________▒▒▒▒####
_____________________▒    └───────┘·:·:·└───────┘    ▒_____________▒▒▒▒####
______________________    └───────┘·:·:·└───────┘    ▒_____________▒▒▒▒____
______________________                               ▒_____________________
_____________________▒                   ┌───────────▒_____________________
_____________________▒ ┌sssssss┐                 @   ▒_____________________
_____________________▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒_____________▒▒▒▒____
___________________________________________________________________▒▒▒▒____
___________________________________________________________________▒▒▒▒____
___________________________________________________________________▒▒▒▒____
___________________________________________________________________▒▒▒▒____
▒▒▒_________________________________▒▒▒▒___________________________▒▒▒▒____
▒▒▒_________________________________▒▒▒▒___________________________________
▒▒▒_________________________________▒▒▒▒________________",'________▒▒▒▒____
▒▒▒_________________________________▒▒▒▒___________________________▒▒▒▒____
▒▒▒▒▒▒##########_______________▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒____
▒▒▒▒▒▒##########_______________▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒____
______##########___________________________________________________________
"#;

fn parse_map(
    s_map: &str,
    mut cells: Vec<Vec<Cells>>,
    shop_type: Shops,
) -> (
    Vec<Vec<Cells>>,
    HashMap<(usize, usize), NPCWrap>,
    HashMap<(usize, usize), Item>,
    HashMap<(usize, usize), Item>,
    HashMap<(usize, usize), EnvInter>,
) {
    // let mut cells: Vec<Vec<Cells>> = Vec::new();
    let mut rng = rand::thread_rng();
    let map_codet = s_map.lines().next().unwrap_or("");
    let map_code: Vec<&str> = map_codet.split("|").collect();
    let npc_types: Vec<&str> = map_code.clone()[0].split(" ").collect();
    let sitem_types: Vec<&str> = map_code.clone()[1].split(" ").collect();
    let item_types: Vec<&str> = map_code.clone()[2].split(" ").collect();

    let data1 = fs::read_to_string("src/npcs/npc_names.json");
    //log::info!("{:?}", &data1);
    let names: Vec<String> = match data1 {
        Ok(content) => serde_json::from_str(&content).unwrap(),
        Err(e) => {
            log::info!("{:?}", e);
            Vec::new()
        }
    };

    let comms = match shop_type {
        Shops::Item => load_comms(&"cave".to_string()),
        Shops::Guild => load_comms(&"guild".to_string()),
        Shops::Church => load_comms(&"cult".to_string()),
        _ => load_comms(&"cave".to_string()),
    };

    let convos = match shop_type {
        Shops::Item => load_convos(&"cave".to_string()),
        Shops::Guild => load_convos(&"guild".to_string()),
        Shops::Church => load_convos(&"cult".to_string()),
        _ => load_convos(&"cave".to_string()),
    };

    let data4 = fs::read_to_string("src/npcs/npc_shops.json");
    //log::info!("{:?}", &data4);
    let shops: ShopData = match data4 {
        Ok(content) => serde_json::from_str(&content).unwrap(),
        Err(e) => {
            log::info!("{:?}", e);
            ShopData {
                shops: Vec::new(),
                guilds: Vec::new(),
                churches: Vec::new(),
            }
        }
    };

    log::info!("shops: {:?}", &shops);

    let data5 = fs::read_to_string("src/npcs/npc_shop_convos.json");
    //log::info!("{:?}", &data5);
    let shop_convos: ShopConvos = match data5 {
        Ok(content) => serde_json::from_str(&content).unwrap(),
        Err(e) => {
            log::info!("{:?}", e);
            ShopConvos {
                shops: Vec::new(),
                guilds: Vec::new(),
                churches: Vec::new(),
            }
        }
    };

    let mut ncount = 0;
    let mut icount = 0;
    let mut sicount = 0;
    //let mut cells = vec![vec![Cells::Null; 150]; 50];
    let mut npcs = HashMap::new();
    let mut items = HashMap::new();
    let mut sitems = HashMap::new();
    let mut env_inters = HashMap::new();
    for (y, line) in s_map.lines().skip(1).enumerate() {
        for (x, ch) in line.chars().enumerate() {
            let cell = match ch {
                '_' => Cells::Empty,
                ',' => Cells::Grass1,
                '\'' => Cells::Grass2,
                '\"' => Cells::Grass3,
                '⚶' => Cells::TallGrass,
                '·' => Cells::Dirt1,
                '.' => Cells::Dirt2,
                ':' => Cells::Dirt3,
                '*' => Cells::Rock,
                '▒' => Cells::Wall,
                '🬤' => Cells::Broken1,
                '🬗' => Cells::Broken2,
                '🬐' => Cells::Broken3,
                '🬑' => Cells::Broken4,
                '🬮' => Cells::Broken5,
                '🬡' => Cells::Broken6,
                ' ' => Cells::Floor,
                '░' => Cells::Floor2,
                '~' => Cells::Water,
                '═' => Cells::MwH,
                '║' => Cells::MwV,
                '╣' => Cells::MwVL,
                '╠' => Cells::MwVR,
                '╩' => Cells::MwHU,
                '╦' => Cells::MwHD,
                '╝' => Cells::MwUL,
                '╚' => Cells::MwUR,
                '╗' => Cells::MwDL,
                '╔' => Cells::MwDR,
                '╬' => Cells::MwCR,
                '─' => Cells::SwH,
                '│' => Cells::SwV,
                '┤' => Cells::SwVL,
                '├' => Cells::SwVR,
                '┴' => Cells::SwHU,
                '┬' => Cells::SwHD,
                '┘' => Cells::SwUL,
                '└' => Cells::SwUR,
                '┐' => Cells::SwDL,
                '┌' => Cells::SwDR,
                '┼' => Cells::SwCR,
                '╟' => Cells::BsVR,
                '╢' => Cells::BsVL,
                '╤' => Cells::BsHD,
                '╧' => Cells::BsHU,
                '≡' => Cells::Cong,
                '°' => Cells::Deg,
                '×' => Cells::Mult,
                '¸' => Cells::Ced,
                '¨' => Cells::Diae,
                '■' => Cells::Blsq,
                '¦' => Cells::VBrk,
                '±' => Cells::PlMin,
                'ø' => Cells::SmZer,
                'Ø' => Cells::BZer,
                '©' => Cells::Cop,
                'Ħ' => Cells::DblBracedGate,
                'ỻ' => Cells::BracedGate,
                'Π' => Cells::Arch,
                'ʭ' => Cells::Bricks,
                'ʬ' => Cells::Crops,
                'ѧ' => Cells::SmallCampfire,
                'Ѧ' => Cells::Campfire,
                'π' => Cells::Table,
                'ṑ' => Cells::Jar,
                '⑁' => Cells::Chair,
                'ж' => Cells::Firewood,
                'ঌ' => Cells::FireSmoke,
                'Ʌ' => Cells::Tent,
                // '@' => Cells::NPCM,
                '{' => Cells::LBrce,
                '}' => Cells::RBrce,
                '(' => Cells::LParen,
                ')' => Cells::RParen,
                '¤' => Cells::GenCur,
                'o' => Cells::Item,
                'l' => Cells::Log,
                'c' => Cells::Clinic,
                'p' => Cells::GPost,
                's' => Cells::CPost,
                '#' => Cells::Transparent,
                _ => Cells::Empty,
            };
            cells[y][x] = cell;
            if ch == '@' {
                let def_name = "Kevthony".to_string();
                match npc_types[ncount] {
                    "CommNPC" => {
                        //let com_def = vec!["Welcome to the caves!!".to_string(), "Theres a tonne of folk down here, lerger cities as you go into the cave.".to_string()];
                        let rnd_comms = {
                            let mut tvec = Vec::new();
                            for _ in 0..4 {
                                tvec.push(match rng.gen_range(0..3) {
                                    0 => comms
                                        .city
                                        .choose(&mut rng)
                                        .unwrap_or(&comms.city[0])
                                        .clone(),
                                    1 => comms
                                        .engine
                                        .choose(&mut rng)
                                        .unwrap_or(&comms.engine[0])
                                        .clone(),
                                    2 => comms
                                        .guild
                                        .choose(&mut rng)
                                        .unwrap_or(&comms.guild[0])
                                        .clone(),
                                    3 => comms
                                        .cult
                                        .choose(&mut rng)
                                        .unwrap_or(&comms.cult[0])
                                        .clone(),
                                    _ => todo!(),
                                });
                                // let tidx = rng.gen_range(0..comms.len());
                                // tvec.push(comms[tidx].clone());
                            }
                            tvec
                        };
                        let name = names.choose(&mut rng).unwrap_or(&def_name.clone()).clone();
                        let t_comm = new_comm_npc(name.clone(), x, y, rnd_comms.clone());
                        npcs.insert((x, y), NPCWrap::CommNPC(t_comm.clone()));
                    }
                    "ConvNPC" => {
                        let name = names.choose(&mut rng).unwrap_or(&def_name.clone()).clone();
                        //let comms = vec!["Welcome to the caves!!".to_string(), "Theres a tonne of folk down here, lerger cities as you go into the cave.".to_string()];
                        let conv: Convo = match rng.gen_range(0..3) {
                            0 => convos
                                .city
                                .choose(&mut rng)
                                .unwrap_or(&convos.city[0])
                                .clone(),
                            1 => convos
                                .engine
                                .choose(&mut rng)
                                .unwrap_or(&convos.engine[0])
                                .clone(),
                            2 => convos
                                .guild
                                .choose(&mut rng)
                                .unwrap_or(&convos.guild[0])
                                .clone(),
                            3 => convos
                                .cult
                                .choose(&mut rng)
                                .unwrap_or(&convos.cult[0])
                                .clone(),
                            _ => todo!(),
                        };

                        let t_comm = new_conv_npc(name.clone(), x, y, conv.clone());
                        npcs.insert((x, y), NPCWrap::ConvNPC(t_comm.clone()));
                    }
                    "ShopNPC" => {
                        let name = names.choose(&mut rng).unwrap_or(&def_name.clone()).clone();
                        // let s_conv: HashMap<String, String> = shops
                        //     .shops
                        //     .choose(&mut rng)
                        //     .unwrap_or(&shops.shops[0].clone())
                        //     .clone();

                        let s_conv = match shop_type {
                            Shops::Item => shops
                                .shops
                                .choose(&mut rng)
                                .unwrap_or(&shops.shops[0].clone())
                                .clone(),
                            Shops::Guild => shops
                                .guilds
                                .choose(&mut rng)
                                .unwrap_or(&shops.guilds[0].clone())
                                .clone(),
                            Shops::Church => shops
                                .churches
                                .choose(&mut rng)
                                .unwrap_or(&shops.churches[0].clone())
                                .clone(),
                            _ => todo!(),
                        };

                        let convo = match shop_type {
                            Shops::Item => shop_convos
                                .shops
                                .choose(&mut rng)
                                .unwrap_or(&shop_convos.shops[0].clone())
                                .clone(),
                            Shops::Guild => shop_convos
                                .guilds
                                .choose(&mut rng)
                                .unwrap_or(&shop_convos.guilds[0].clone())
                                .clone(),
                            Shops::Church => shop_convos
                                .churches
                                .choose(&mut rng)
                                .unwrap_or(&shop_convos.churches[0].clone())
                                .clone(),
                            _ => todo!(),
                        };

                        let t_shop = new_shop_npc(
                            name.clone(),
                            x,
                            y,
                            s_conv.clone(),
                            convo.clone(),
                            shop_type,
                        );
                        npcs.insert((x, y), NPCWrap::ShopNPC(t_shop.clone()));
                    }
                    _ => todo!(),
                }
                ncount += 1;
            }
            if ch == 'o' {
                match sitem_types[sicount] {
                    "HealthPotion" => {
                        let ti = Item::new_health_potion(x, y);
                        sitems.insert((x, y), ti.clone());
                    }
                    "Salve" => {
                        let ti = Item::new_salve(x, y);
                        sitems.insert((x, y), ti.clone());
                    }
                    "Dowel" => {
                        let ti = Item::new_dowel(x, y);
                        sitems.insert((x, y), ti.clone());
                    }
                    "SmallWoodShield" => {
                        let ti = Item::new_small_wood_shield(x, y);
                        sitems.insert((x, y), ti.clone());
                    }
                    "Apple" => {
                        let ti = Item::new_apple(x, y);
                        sitems.insert((x, y), ti.clone());
                    }
                    "BronzeClaymore" => {
                        let ti = Item::new_bronze_claymore(x, y);
                        sitems.insert((x, y), ti.clone());
                    }
                    "BronzeShortsword" => {
                        let ti = Item::new_bronze_shortsword(x, y);
                        sitems.insert((x, y), ti.clone());
                    }
                    "BronzeLongsword" => {
                        let ti = Item::new_bronze_longsword(x, y);
                        sitems.insert((x, y), ti.clone());
                    }
                    "BronzeLightAxe" => {
                        let ti = Item::new_bronze_light_axe(x, y);
                        sitems.insert((x, y), ti.clone());
                    }
                    "BronzeHeavyAxe" => {
                        let ti = Item::new_bronze_heavy_axe(x, y);
                        sitems.insert((x, y), ti.clone());
                    }
                    "BronzeWarAxe" => {
                        let ti = Item::new_bronze_war_axe(x, y);
                        sitems.insert((x, y), ti.clone());
                    }
                    "BronzePickHammer" => {
                        let ti = Item::new_bronze_pick_hammer(x, y);
                        sitems.insert((x, y), ti.clone());
                    }
                    "WoodStaff" => {
                        let ti = Item::new_wood_staff(x, y);
                        sitems.insert((x, y), ti.clone());
                    }
                    "LightArmour" => {
                        let ti = Item::new_light_armour(x, y);
                        sitems.insert((x, y), ti.clone());
                    }
                    "ShieldingPendant" => {
                        let ti = Item::new_shielding_pendant(x, y);
                        sitems.insert((x, y), ti.clone());
                    }
                    "StrengthPendant" => {
                        let ti = Item::new_strength_pendant(x, y);
                        sitems.insert((x, y), ti.clone());
                    }
                    "AgilityPendant" => {
                        let ti = Item::new_agility_pendant(x, y);
                        sitems.insert((x, y), ti.clone());
                    }
                    _ => {
                        log::info!("itm {:?}", sitem_types[sicount]);
                    }
                }
                sicount += 1;
            }
            if ch == 'O' {
                match item_types[icount] {
                    "HealthPotion" => {
                        let ti = Item::new_health_potion(x, y);
                        items.insert((x, y), ti.clone());
                    }
                    "Salve" => {
                        let ti = Item::new_salve(x, y);
                        items.insert((x, y), ti.clone());
                    }
                    "Dowel" => {
                        let ti = Item::new_dowel(x, y);
                        items.insert((x, y), ti.clone());
                    }
                    "SmallWoodShield" => {
                        let ti = Item::new_small_wood_shield(x, y);
                        items.insert((x, y), ti.clone());
                    }
                    "Apple" => {
                        let ti = Item::new_apple(x, y);
                        items.insert((x, y), ti.clone());
                    }
                    "BronzeClaymore" => {
                        let ti = Item::new_bronze_claymore(x, y);
                        items.insert((x, y), ti.clone());
                    }
                    "BronzeShortsword" => {
                        let ti = Item::new_bronze_shortsword(x, y);
                        items.insert((x, y), ti.clone());
                    }
                    "BronzeLongsword" => {
                        let ti = Item::new_bronze_longsword(x, y);
                        items.insert((x, y), ti.clone());
                    }
                    "BronzeLightAxe" => {
                        let ti = Item::new_bronze_light_axe(x, y);
                        items.insert((x, y), ti.clone());
                    }
                    "BronzeHeavyAxe" => {
                        let ti = Item::new_bronze_heavy_axe(x, y);
                        items.insert((x, y), ti.clone());
                    }
                    "BronzeWarAxe" => {
                        let ti = Item::new_bronze_war_axe(x, y);
                        items.insert((x, y), ti.clone());
                    }
                    "BronzePickHammer" => {
                        let ti = Item::new_bronze_pick_hammer(x, y);
                        items.insert((x, y), ti.clone());
                    }
                    "WoodStaff" => {
                        let ti = Item::new_wood_staff(x, y);
                        items.insert((x, y), ti.clone());
                    }
                    "LightArmour" => {
                        let ti = Item::new_light_armour(x, y);
                        items.insert((x, y), ti.clone());
                    }
                    _ => {
                        log::info!("itm {:?}", item_types[icount]);
                    }
                }
                icount += 1;
            }
            if ch == 'l' {
                env_inters.insert((x, y), EnvInter::Records);
            }
            if ch == 'p' {
                env_inters.insert((x, y), EnvInter::GuildPost);
            }
            if ch == 'c' {
                env_inters.insert((x, y), EnvInter::Clinic);
            }
            if ch == 'C' {
                env_inters.insert((x, y), EnvInter::Construction);
            }
            if ch == 's' {
                env_inters.insert((x, y), EnvInter::ChurchPost);
            }
            if ch == '℧' {
                env_inters.insert((x, y), EnvInter::Cauldron);
            }
            if ch == 'h' {
                env_inters.insert((x, y), EnvInter::Herbalist);
            }
            if ch == 'd' {
                env_inters.insert(
                    (x, y),
                    EnvInter::Door(Door::HLocked(rng.gen_range(0..10) as u8)),
                );
            }
            if ch == 'D' {
                env_inters.insert(
                    (x, y),
                    EnvInter::Door(Door::VLocked(rng.gen_range(0..10) as u8)),
                );
            }
        }
    }
    (cells, npcs, sitems, items, env_inters)
}

fn place_small_parts(
    mut map: Vec<Vec<Cells>>,
    part: Vec<Vec<Cells>>,
    npcs: HashMap<(usize, usize), NPCWrap>,
    sitems: HashMap<(usize, usize), Item>,
    items: HashMap<(usize, usize), Item>,
    env_inter: HashMap<(usize, usize), EnvInter>,
    quad: u8,
) -> (
    Vec<Vec<Cells>>,
    HashMap<(usize, usize), NPCWrap>,
    HashMap<(usize, usize), Item>,
    HashMap<(usize, usize), Item>,
    HashMap<(usize, usize), EnvInter>,
) {
    let (sx, sy) = {
        match quad {
            1 => (0, 0),
            2 => (75, 0),
            3 => (0, 25),
            4 => (75, 25),
            _ => {
                log::info!("small parts error");
                (0, 0)
            }
        }
    };

    for j in 0..part.len() {
        for i in 0..part[0].len() {
            //log::info!("copying map q: {:?} | dir: ({}, {}) | idx: ({}, {}) | char: {:?}", quad, sx, sy, i, j, part[j][i]);
            map[j + &sy][i + &sx] = part[j][i];
        }
    }
    let mut new_npcs = HashMap::new();
    for (npos, npc) in npcs {
        new_npcs.insert(((npos.0 + &sx), (npos.1 + &sy)), npc);
    }
    let mut new_sitems = HashMap::new();
    for (ipos, item) in sitems {
        new_sitems.insert(((ipos.0 + &sx), (ipos.1 + &sy)), item);
    }
    let mut new_items = HashMap::new();
    for (ipos, mut item) in items {
        item.set_pos(((ipos.0 + &sx), (ipos.1 + &sy)));
        new_items.insert(((ipos.0 + &sx), (ipos.1 + &sy)), item);
    }
    let mut new_env_inter = HashMap::new();
    for (epos, env) in env_inter.clone() {
        new_env_inter.insert(((epos.0 + &sx), (epos.1 + &sy)), env);
    }

    (map, new_npcs, new_sitems, new_items, new_env_inter)
}

fn build_small_settle(
    is_cave_o: bool,
) -> (
    Vec<Vec<Cells>>,
    HashMap<(usize, usize), NPCWrap>,
    HashMap<(usize, usize), Item>,
    HashMap<(usize, usize), Item>,
    HashMap<(usize, usize), EnvInter>,
) {
    let cells = vec![vec![Cells::Null; 150]; 50];
    let item_cell = vec![vec![Cells::Null; 75]; 25];
    let guild_cell = vec![vec![Cells::Null; 75]; 25];
    let church_cell = vec![vec![Cells::Null; 75]; 25];
    let anchor_cell = vec![vec![Cells::Null; 75]; 25];
    let mut rng = rand::thread_rng();
    let item_shop = if is_cave_o {
        cave_o1
    } else {
        item_shops.choose(&mut rng).expect("item parse failed")
    };

    let guild = if is_cave_o {
        cave_o3
    } else {
        guild_shops.choose(&mut rng).expect("guild parse failed")
    };
    let church = if is_cave_o {
        cave_o4
    } else {
        churches.choose(&mut rng).expect("church parse failed")
    };
    let anchor = if is_cave_o {
        cave_o2
    } else {
        anchors.choose(&mut rng).expect("anchor parse failed")
    };

    // let guild = guild_shops.choose(&mut rng).expect("guild parse failed");
    // let church = churches.choose(&mut rng).expect("church parse failed");
    // let anchor = anchors.choose(&mut rng).expect("anchor parse failed");
    let (item_map, item_npcs, item_sitems, item_items, item_env_inter) =
        parse_map(item_shop, item_cell.clone(), Shops::Item);
    let (guild_map, guild_npcs, guild_sitems, guild_items, guild_env_inter) =
        parse_map(guild, guild_cell.clone(), Shops::Guild);
    let (church_map, church_npcs, church_sitems, church_items, church_env_inter) =
        parse_map(church, church_cell.clone(), Shops::Church);
    let (anchor_map, anchor_npcs, anchor_sitems, anchor_items, anchor_env_inter) =
        parse_map(anchor, anchor_cell.clone(), Shops::Null);
    let mut quads: Vec<u8> = vec![1, 2, 3, 4];
    let q1 = if is_cave_o {
        1
    } else {
        quads.choose(&mut rng).expect("rand 1 failed").clone()
    };
    quads.retain(|&x| x != q1);
    //let q1 = quads.choose(&mut rng).expect("rand 1 failed").clone();
    //quads.retain(|&x| x != q1);
    let (q1_map, q1_npcs, q1_sitems, q1_items, q1_env_inter) = place_small_parts(
        cells.clone(),
        item_map,
        item_npcs,
        item_sitems,
        item_items,
        item_env_inter,
        q1,
    );
    let q2 = if is_cave_o {
        3
    } else {
        quads.choose(&mut rng).expect("rand 2 failed").clone()
    };
    quads.retain(|&x| x != q2);

    //let q2 = quads.choose(&mut rng).expect("rand 2 failed").clone();
    //quads.retain(|&x| x != q2);
    let (q2_map, q2_npcs, q2_sitems, q2_items, q2_env_inter) = place_small_parts(
        q1_map.clone(),
        guild_map,
        guild_npcs,
        guild_sitems,
        guild_items,
        guild_env_inter,
        q2,
    );
    let q3 = if is_cave_o {
        4
    } else {
        quads.choose(&mut rng).expect("rand 3 failed").clone()
    };
    quads.retain(|&x| x != q3);
    //let q3 = quads.choose(&mut rng).expect("rand 3 failed").clone();
    //quads.retain(|&x| x != q3);
    let (q3_map, q3_npcs, q3_sitems, q3_items, q3_env_inter) = place_small_parts(
        q2_map.clone(),
        church_map,
        church_npcs,
        church_sitems,
        church_items,
        church_env_inter,
        q3,
    );
    let q4 = if is_cave_o {
        2
    } else {
        quads.choose(&mut rng).expect("rand 4 failed").clone()
    };
    quads.retain(|&x| x != q4);
    //let q4 = quads.choose(&mut rng).expect("rand 4 failed").clone();
    let (final_map, q4_npcs, q4_sitems, q4_items, q4_env_inter) = place_small_parts(
        q3_map.clone(),
        anchor_map,
        anchor_npcs,
        anchor_sitems,
        anchor_items,
        anchor_env_inter,
        q4,
    );
    let mut final_npcs = HashMap::new();
    let mut final_sitems = HashMap::new();
    let mut final_items = HashMap::new();
    let mut final_env_inter = HashMap::new();
    //let mut s_npcs = HashMap::new();
    //s_npcs.insert();
    final_npcs.extend(q1_npcs);
    final_npcs.extend(q2_npcs);
    final_npcs.extend(q3_npcs);
    final_npcs.extend(q4_npcs);
    final_sitems.extend(q1_sitems);
    final_sitems.extend(q2_sitems);
    final_sitems.extend(q3_sitems);
    final_sitems.extend(q4_sitems);
    final_items.extend(q1_items);
    final_items.extend(q2_items);
    final_items.extend(q3_items);
    final_items.extend(q4_items);
    final_env_inter.extend(q1_env_inter);
    final_env_inter.extend(q2_env_inter);
    final_env_inter.extend(q3_env_inter);
    final_env_inter.extend(q4_env_inter);
    //log::info!("{:?}", &final_sitems);
    // log::info!("{:?}", &final_items);
    (
        final_map,
        final_npcs,
        final_sitems,
        final_items,
        final_env_inter,
    )
}

fn get_npc_shops(
    mut npcs: HashMap<(usize, usize), NPCWrap>,
    sitems: HashMap<(usize, usize), Item>,
) -> (HashMap<Shops, Shop>, HashMap<(usize, usize), NPCWrap>) {
    let mut s_npcs = HashMap::new();
    for (k, v) in npcs.clone() {
        match v {
            NPCWrap::ShopNPC(_) => {
                s_npcs.insert(k, v);
                //npcs.remove(&k);
            }
            _ => {}
        }
    }
    let mut shops = HashMap::new();

    for (_, n) in s_npcs {
        //let nb = box_npc(n);
        let mut snpc = match n {
            NPCWrap::ShopNPC(shop_npc) => shop_npc,
            _ => todo!(),
        };
        let shop_name = "shop_name".to_string();
        match snpc.get_shop_type() {
            Shops::Item => shops.insert(
                Shops::Item,
                Shop::new_item_shop(
                    snpc.get_sh_conv()[&shop_name].clone(),
                    NPCWrap::ShopNPC(snpc),
                    sitems.clone(),
                ),
            ),
            Shops::Guild => shops.insert(
                Shops::Guild,
                Shop::new_guild(
                    snpc.get_sh_conv()[&shop_name].clone(),
                    NPCWrap::ShopNPC(snpc),
                    HashMap::new(),
                ),
            ),
            Shops::Church => shops.insert(
                Shops::Church,
                Shop::new_church(
                    snpc.get_sh_conv()[&shop_name].clone(),
                    NPCWrap::ShopNPC(snpc),
                    HashMap::new(),
                ),
            ),
            //_ => Some(Shop::default()),
            _ => todo!(),
        };
    }
    (shops, npcs.clone())
}

#[derive(Clone, Debug, PartialEq)]
pub struct Settlement {
    pub stype: Settle,
    pub sname: String,
    pub pos: (i16, i16),
    pub npcs: HashMap<(usize, usize), NPCWrap>,
    pub items: HashMap<(usize, usize), Item>,
    pub npcs_sent: bool,
    pub items_sent: bool,
    pub shops: HashMap<Shops, Shop>,
    pub env_inters: HashMap<(usize, usize), EnvInter>,
    pub map: Vec<Vec<Cells>>,
    pub found: bool,
}

impl Settlement {
    pub fn new(
        stype: Settle,
        sname: String,
        pos: (i16, i16),
        npcs: HashMap<(usize, usize), NPCWrap>,
        items: HashMap<(usize, usize), Item>,
        shops: HashMap<Shops, Shop>,
        env_inters: HashMap<(usize, usize), EnvInter>,
        map: Vec<Vec<Cells>>,
        found: bool,
    ) -> Self {
        Self {
            stype,
            sname,
            pos,
            npcs,
            items,
            npcs_sent: false,
            items_sent: false,
            shops,
            env_inters,
            map,
            found,
        }
    }

    pub fn demo_settle(pos: (i16, i16), npcs: HashMap<(usize, usize), NPCWrap>) -> Self {
        let cells = vec![vec![Cells::Null; 150]; 50];
        let (map, mut mpcs, sitems, items, env_inters) = build_small_settle(true);
        let (shops, snpcs) = get_npc_shops(mpcs.clone(), sitems);

        Self {
            stype: Settle::Small,
            sname: "Cave Opening".to_string(),
            pos: pos,
            npcs: snpcs,
            items: items,
            npcs_sent: false,
            items_sent: false,
            shops: shops,
            env_inters,
            map: map,
            found: true,
        }
    }

    pub fn new_small_settle(pos: (i16, i16)) -> Self {
        let data1 = fs::read_to_string("src/locations/settle_names.json");
        //log::info!("{:?}", &data1);
        let names: Vec<String> = match data1 {
            Ok(content) => serde_json::from_str(&content).unwrap(),
            Err(e) => {
                log::info!("{:?}", e);
                Vec::new()
            }
        };
        let mut rng = rand::thread_rng();
        let name_oops = "Jadeitite".to_string();
        let name = names.choose(&mut rng).unwrap_or(&name_oops.clone()).clone();
        let (map, mut npcs, sitems, items, env_inters) = build_small_settle(false);
        let (shops, snpcs) = get_npc_shops(npcs.clone(), sitems);
        Self {
            stype: Settle::Small,
            sname: name,
            pos: pos,
            npcs: npcs,
            items: items,
            npcs_sent: false,
            items_sent: false,
            shops: shops,
            env_inters,
            map: map,
            found: false,
        }
    }

    pub fn new_node_settle(pos: (i16, i16), sname: String) -> Self {
        let (map, npcs, sitems, items, env_inters) = build_small_settle(false);
        let (shops, snpcs) = get_npc_shops(npcs.clone(), sitems);
        Self {
            stype: Settle::Small,
            sname,
            pos,
            npcs: snpcs,
            items,
            npcs_sent: false,
            items_sent: false,
            shops,
            env_inters,
            map,
            found: false,
        }
    }

    pub fn tog_found(&mut self) {
        if !self.found {
            self.found = !self.found;
        }
    }

    pub fn get_all_shop_items(&mut self) -> Option<HashMap<(usize, usize), Item>> {
        let mut asi = HashMap::new();
        for (_, shop) in &self.shops {
            for ((x, y), i) in shop.get_stock() {
                asi.insert((x, y), i.clone());
            }
        }
        if asi.len() == 0 {
            None
        } else {
            Some(asi.clone())
        }
    }

    pub fn get_shop_from_item_pos(&mut self, pos: (i16, i16)) -> Option<Shop> {
        for (sh, s) in &self.shops {
            for ((x, y), i) in s.get_stock() {
                // if x  && y == (pos.1 - self.pos.1) {
                if (x as i16 + self.pos.0) == pos.0 && (y as i16 + self.pos.1) == pos.1 {
                    return Some(s.clone());
                }
            }
        }
        None
    }

    pub fn get_stats(&mut self) -> (String, String) {
        let mut npc_names = Vec::new();
        for (_, n) in self.npcs.clone() {
            let sname = box_npc(n).get_sname();
            npc_names.push(sname);
        }
        let mut shops = Vec::new();
        for (e, s) in self.shops.clone() {
            let s_string = match e {
                Shops::Item => format!("Item: {}", s.sname),
                Shops::Guild => "Guild".to_string(),
                Shops::Church => "Church".to_string(),
                _ => "".to_string(),
            };
            shops.push(s_string);
        }
        (
            self.sname.clone(),
            format!(
                r#"
{}
---

Shops:
{}

Residents:
{}
        "#,
                self.sname.clone(),
                shops.join("\n"),
                npc_names.join("\n")
            ),
        )
    }

    pub fn update_shop(&mut self, mut shop: Shop) {
        let stype = shop.get_sptype();
        self.shops.insert(stype, shop);
    }

    pub fn add_task_env(&mut self, env: EnvInter) {
        let mut rng = rand::thread_rng();
        let map = self.map.clone();
        loop {
            let x = rng.gen_range(0..map[0].len() - 1);
            let y = rng.gen_range(0..map.len() - 1);
            if map[y][x] == Cells::Empty && !self.env_inters.contains_key(&(x, y)) {
                self.env_inters.insert((x, y), env);
                break;
            }
        }
    }

    pub fn get_pos(&mut self) -> (i16, i16) {
        self.pos.clone()
    }

    pub fn set_pos(&mut self, tpos: (i16, i16)) {
        self.pos = tpos;
    }

    pub fn get_npcs(&mut self) -> HashMap<(usize, usize), NPCWrap> {
        self.npcs.clone()
    }

    pub fn get_npcs_sent(&mut self) -> bool {
        self.npcs_sent.clone()
    }

    pub fn tog_npcs_sent(&mut self) {
        self.npcs_sent = !self.npcs_sent;
    }

    pub fn get_items(&mut self) -> HashMap<(usize, usize), Item> {
        self.items.clone()
    }

    pub fn get_items_sent(&mut self) -> bool {
        self.items_sent.clone()
    }

    pub fn tog_items_sent(&mut self) {
        self.items_sent = !self.items_sent;
    }

    pub fn get_shops(&mut self) -> HashMap<Shops, Shop> {
        self.shops.clone()
    }

    pub fn get_map(&mut self) -> Vec<Vec<Cells>> {
        self.map.clone()
    }

    pub fn get_sname(&mut self) -> String {
        self.sname.clone()
    }

    pub fn get_env_inters(&mut self) -> HashMap<(usize, usize), EnvInter> {
        self.env_inters.clone()
    }
}
